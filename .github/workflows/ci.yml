name: Tarea Automatizada de ejecución de pruebas

env:
  DOTNET_VERSION: '8.x'                     # la versión de .NET
  SONAR_ORG: 'p-cuadros'                     # la versión de .NET

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
permissions:
  contents: read

jobs:
  coverage:
    name: CoverageReport
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurando la versión de NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          # dotnet-quality: 'ga'
      - name: Restaurar los paquetes
        run: dotnet restore 
      - name: Ejecutar pruebas
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          # reports: cobertura.xml
          # targetdir: coveragereport
          reports: ./*/*/*/coverage.cobertura.xml
          targetdir: coveragereport
          reporttypes: MarkdownSummary;MarkdownAssembliesSummary;MarkdownSummaryGithub

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport # Artifact name        
          path: coveragereport # Directory containing files to upload

      # - name: Add comment to PR # Only applicable if 'MarkdownSummaryGithub' or one of the other Markdown report types is generated
      #   if: github.event_name == 'pull_request'
      #   run: gh pr comment $PR_NUMBER --body-file coveragereport/SummaryGithub.md # Adjust path and filename if necessary
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PR_NUMBER: ${{ github.event.number }}
          
      - name: Publish coverage in build summary # Only applicable if 'MarkdownSummaryGithub' or one of the other Markdown report types is generated
        run: cat coveragereport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY # Adjust path and filename if necessary
        shell: bash

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurando la versión de NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          # dotnet-quality: 'ga'
      - name: Instalar Scanner
        run: dotnet tool install -g dotnet-sonarscanner
      - name: Ejecutar escaneo
        run: | 
          dotnet-sonarscanner begin /k:"BankApp" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build SomeConsoleApplication.sln
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"